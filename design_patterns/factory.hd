### 🏭 Factory Design Pattern (JS & React Context Example)

The **Factory Design Pattern** allows us to create objects without specifying the exact class of the object that will be created.

---

The **Factory Design Pattern** is a **creational pattern** that provides an interface for creating objects in a superclass, but allows subclasses or internal logic to determine the actual class to instantiate.

Instead of using `new` directly, the Factory Pattern **delegates the instantiation logic** to a dedicated factory method. This makes the system more **flexible**, **extensible**, and adherent to the **Open/Closed Principle** from SOLID design principles.

In **React**, this pattern becomes especially useful when you want to render different UI components dynamically based on config or conditions. When paired with **React Context**, the factory logic becomes even more scalable and reusable across the component tree.

---

### ✅ JavaScript Example — Notification Factory

```js
// Define different types of notifications
class EmailNotification {
  constructor(target) {
    this.target = target;
  }
  send() {
    console.log(`Sending Email to ${this.target}`);
  }
}

class SMSNotification {
  constructor(target) {
    this.target = target;
  }
  send() {
    console.log(`Sending SMS to ${this.target}`);
  }
}

class PushNotification {
  constructor(target) {
    this.target = target;
  }
  send() {
    console.log(`Sending Push Notification to ${this.target}`);
  }
}

// Factory class to create notifications
class NotificationFactory {
  static createNotification(type, target) {
    switch (type.toLowerCase()) {
      case "email":
        return new EmailNotification(target);
      case "sms":
        return new SMSNotification(target);
      case "push":
        return new PushNotification(target);
      default:
        throw new Error("Unknown type");
    }
  }
}

// Usage
const newNotification = NotificationFactory.createNotification("email", "v2@gmail.com");
newNotification.send();
```

---

### ✅ React Example — Component Factory with Context

```jsx
import React, { createContext, useContext } from "react";

// 1. Define your UI components
const Input = ({ placeholder }) => <input placeholder={placeholder} />;

const Select = ({ options }) => (
  <select>
    {options.map((opt, i) => (
      <option key={i} value={opt.key}>{opt.value}</option>
    ))}
  </select>
);

const Button = ({ label }) => <button>{label}</button>;

// 2. Create a context to provide the factory function
const ComponentContext = createContext();

// 3. Create a context provider that holds the factory logic
const ComponentProvider = ({ children }) => {
  const components = {
    input: Input,
    select: Select,
    button: Button,
  };

  const getComponent = (type, props) => {
    const Component = components[type.toLowerCase()];
    if (!Component) return <p>Unknown component type: {type}</p>;
    return <Component {...props} />;
  };

  return (
    <ComponentContext.Provider value={{ getComponent }}>
      {children}
    </ComponentContext.Provider>
  );
};

// 4. Create a custom hook to use the factory from context
const useComponentFactory = () => {
  const context = useContext(ComponentContext);
  if (!context) {
    throw new Error("useComponentFactory must be used within a ComponentProvider");
  }
  return context.getComponent;
};

// 5. Create the App that uses dynamic config rendering
const App = () => {
  const config = [
    { type: "input", props: { placeholder: "Enter name" } },
    {
      type: "select",
      props: {
        options: [
          { key: "red", value: "Red" },
          { key: "blue", value: "Blue" },
        ],
      },
    },
    { type: "button", props: { label: "Submit" } },
  ];

  const getComponent = useComponentFactory();

  return (
    <div>
      {config.map((item, index) => (
        <div key={index}>{getComponent(item.type, item.props)}</div>
      ))}
    </div>
  );
};

// 6. Wrap the App with the ComponentProvider
const Root = () => (
  <ComponentProvider>
    <App />
  </ComponentProvider>
);

export default Root;
```

---

### ✅ Summary
- Factory Pattern separates object creation from usage.
- It's useful for dynamically creating components in JavaScript or React.
- Context + Factory is a powerful combo in React for dynamic rendering.

Let me know if you'd like a PDF or markdown